package derive

import (
	"bytes"
	"fmt"
	"math/big"

	legacyPredeploys "github.com/ethereum-optimism/optimism/op-bindings/predeploys"
	"github.com/ethereum-optimism/optimism/op-service/solabi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
)

const UpgradeToFuncSignature = "upgradeTo(address)"

var (
	UpgradeToFuncBytes4 = crypto.Keccak256([]byte(UpgradeToFuncSignature))[:4]

	// Gas Price Oracle Parameters
	deployLimbGasPriceOracleSource    = UpgradeDepositSource{Intent: "Limb: Gas Price Oracle Deployment"}
	updateLimbGasPriceOracleSource    = UpgradeDepositSource{Intent: "Limb: Gas Price Oracle Proxy Update"}
	GasPriceOracleLimbDeployerAddress = common.HexToAddress("0x420000000000000000000000000000000000000F")
	limbGasPriceOracleAddress         = crypto.CreateAddress(GasPriceOracleLimbDeployerAddress, 0)

	// Bytecode
	gasPriceOracleLimbDeploymentBytecode = common.FromHex("0x60e060405234801561001057600080fd5b506001608081905260a052600060c05260805160a05160c05161131661004f6000396000610569015260006105400152600061051701526113166000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80635d71ff8f116100e3578063de26c4a11161008c578063f2fde38b11610066578063f2fde38b14610329578063f45e65d81461033c578063fe173b971461029257600080fd5b8063de26c4a1146102e6578063e38e91f9146102f9578063e875f02a1461030c57600080fd5b8063b3ab15fb116100bd578063b3ab15fb146102b8578063d76a0548146102cb578063dab3b3da146102d357600080fd5b80635d71ff8f1461027f5780636ef25c3a146102925780638da5cb5b1461029857600080fd5b806332e70fea11610145578063519b4bd31161011f578063519b4bd31461021d57806354fd4d5014610225578063570ca7351461023a57600080fd5b806332e70fea146101ec57806349948e0e146102015780634d5d9a2a1461021457600080fd5b8063275aedd211610176578063275aedd2146101ca5780632e0f2625146101dd578063313ce567146101e557600080fd5b806306f837d31461019d5780630c18c162146101b957806316d3bc7f146101c1575b600080fd5b6101a660005481565b6040519081526020015b60405180910390f35b6101a6610344565b6101a660035481565b6101a66101d8366004610e20565b610353565b6101a6600681565b60066101a6565b6101ff6101fa366004610e20565b6103c1565b005b6101a661020f366004610e68565b610480565b6101a660045481565b6101a661048b565b61022d610510565b6040516101b09190610f67565b60025461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b0565b6101ff61028d366004610e20565b6105b3565b486101a6565b60015461025a9073ffffffffffffffffffffffffffffffffffffffff1681565b6101ff6102c6366004610fb8565b61066d565b6101ff610765565b6101a66102e1366004610e20565b6108c8565b6101a66102f4366004610e68565b6108df565b6101ff610307366004610e20565b6108fc565b600f546103199060ff1681565b60405190151581526020016101b0565b6101ff610337366004610fb8565b6109b4565b6101a6610b29565b600061034e610b33565b905090565b600f5460009060ff1661036857506000919050565b6004546103bb906103ac90620f4240907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8615878302888104909314170117611053565b60035481019081106000031790565b92915050565b60025473ffffffffffffffffffffffffffffffffffffffff163314610447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064015b60405180910390fd5b6003805490829055604051829082907f08a9bc8992a7c4fa053bafee70f234ebf754c491d16759a28adf47e3cd9375b990600090a35050565b60006103bb82610b94565b600073420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16635cf249696040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190611067565b606061053b7f0000000000000000000000000000000000000000000000000000000000000000610bfa565b6105647f0000000000000000000000000000000000000000000000000000000000000000610bfa565b61058d7f0000000000000000000000000000000000000000000000000000000000000000610bfa565b60405160200161059f93929190611080565b604051602081830303815290604052905090565b60025473ffffffffffffffffffffffffffffffffffffffff163314610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865206f70657261746f72000000000000604482015260640161043e565b6004805490829055604051829082907f977ba0b597123a7c26f0d57b10b1ab88e14d4e8676e6629640df681ccf5ffcf290600090a35050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161043e565b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907ffbe5b6cbafb274f445d7fed869dc77a838d8243a22c460de156560e8857cad0390600090a35050565b3373deaddeaddeaddeaddeaddeaddeaddeaddead000114610808576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f47617350726963654f7261636c653a206f6e6c7920746865206465706f73697460448201527f6f72206163636f756e742063616e207365742069734c696d6220666c61670000606482015260840161043e565b600f5460ff161561089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f47617350726963654f7261636c653a2049734c696d6220616c7265616479207360448201527f6574000000000000000000000000000000000000000000000000000000000000606482015260840161043e565b600f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b600581600a81106108d857600080fd5b0154905081565b60006108e9610b33565b6108f283610d2f565b6103bb91906110f6565b60025473ffffffffffffffffffffffffffffffffffffffff16331461097d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865206f70657261746f72000000000000604482015260640161043e565b600080548282556040519091839183917f5d6ae9db2d6725497bed0302a8212c0db5fdb3bd7d14f188a83b5589089caafd91a35050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161043e565b73ffffffffffffffffffffffffffffffffffffffff8116610ab2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e6577206f776e657220697320746865207a65726f2061646472657373000000604482015260640161043e565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061034e610dbf565b600073420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16638b239f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ec573d6000803e3d6000fd5b600080610ba083610d2f565b90506000610bac610dbf565b610bb461048b565b610bbc610b33565b610bc690856110f6565b610bd0919061110e565b610bda919061110e565b9050610be86006600a61126b565b610bf29082611053565b949350505050565b606081600003610c3d57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610c675780610c5181611277565b9150610c609050600a83611053565b9150610c41565b60008167ffffffffffffffff811115610c8257610c82610e39565b6040519080825280601f01601f191660200182016040528015610cac576020820181803683370190505b5090505b8415610bf257610cc16001836112af565b9150610cce600a866112c6565b610cd99060306110f6565b60f81b818381518110610cee57610cee6112da565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610d28600a86611053565b9450610cb0565b80516000908190815b81811015610db257848181518110610d5257610d526112da565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016600003610d9257610d8b6004846110f6565b9250610da0565b610d9d6010846110f6565b92505b80610daa81611277565b915050610d38565b50610bf2826104406110f6565b600073420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16639e8c49666040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ec573d6000803e3d6000fd5b600060208284031215610e3257600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215610e7a57600080fd5b813567ffffffffffffffff80821115610e9257600080fd5b818401915084601f830112610ea657600080fd5b813581811115610eb857610eb8610e39565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610efe57610efe610e39565b81604052828152876020848701011115610f1757600080fd5b826020860160208301376000928101602001929092525095945050505050565b60005b83811015610f52578181015183820152602001610f3a565b83811115610f61576000848401525b50505050565b6020815260008251806020840152610f86816040850160208701610f37565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600060208284031215610fca57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610fee57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008261106257611062610ff5565b500490565b60006020828403121561107957600080fd5b5051919050565b60008451611092818460208901610f37565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516110ce816001850160208a01610f37565b600192019182015283516110e9816002840160208801610f37565b0160020195945050505050565b6000821982111561110957611109611024565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561114657611146611024565b500290565b600181815b808511156111a457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561118a5761118a611024565b8085161561119757918102915b93841c9390800290611150565b509250929050565b6000826111bb575060016103bb565b816111c8575060006103bb565b81600181146111de57600281146111e857611204565b60019150506103bb565b60ff8411156111f9576111f9611024565b50506001821b6103bb565b5060208310610133831016604e8410600b8410161715611227575081810a6103bb565b611231838361114b565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561126357611263611024565b029392505050565b6000610fee83836111ac565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112a8576112a8611024565b5060010190565b6000828210156112c1576112c1611024565b500390565b6000826112d5576112d5610ff5565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea164736f6c634300080f000a")

	// Enable Limb Parameters
	enableLimbSource = UpgradeDepositSource{Intent: "Limb: Gas Price Oracle Set Limb"}
	enableLimbInput  = crypto.Keccak256([]byte("setLimb()"))[:4]
)

func MantleLimbNetworkUpgradeTransactions() ([]hexutil.Bytes, error) {
	upgradeTxns := make([]hexutil.Bytes, 0, 3)

	// Deploy Gas Price Oracle transaction
	deployGasPriceOracle, err := types.NewTx(&types.DepositTx{
		SourceHash:          deployLimbGasPriceOracleSource.SourceHash(),
		From:                GasPriceOracleLimbDeployerAddress,
		To:                  nil,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 1_625_000,
		IsSystemTransaction: false,
		Data:                gasPriceOracleLimbDeploymentBytecode,
	}).MarshalBinary()

	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, deployGasPriceOracle)

	// Deploy Gas Price Oracle Proxy upgrade transaction
	updateGasPriceOracleProxy, err := types.NewTx(&types.DepositTx{
		SourceHash:          updateLimbGasPriceOracleSource.SourceHash(),
		From:                common.Address{},
		To:                  &legacyPredeploys.GasPriceOracleAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 50_000,
		IsSystemTransaction: false,
		Data:                upgradeToCalldata(limbGasPriceOracleAddress),
	}).MarshalBinary()

	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, updateGasPriceOracleProxy)

	// Enable Limb transaction
	enableLimb, err := types.NewTx(&types.DepositTx{
		SourceHash:          enableLimbSource.SourceHash(),
		From:                L1InfoDepositerAddress,
		To:                  &legacyPredeploys.GasPriceOracleAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 90_000,
		IsSystemTransaction: false,
		Data:                enableLimbInput,
	}).MarshalBinary()

	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, enableLimb)

	return upgradeTxns, nil
}

func upgradeToCalldata(addr common.Address) []byte {
	buf := bytes.NewBuffer(make([]byte, 0, 4+20))
	if err := solabi.WriteSignature(buf, UpgradeToFuncBytes4); err != nil {
		panic(fmt.Errorf("failed to write upgradeTo signature data: %w", err))
	}
	if err := solabi.WriteAddress(buf, addr); err != nil {
		panic(fmt.Errorf("failed to write upgradeTo address data: %w", err))
	}
	return buf.Bytes()
}
