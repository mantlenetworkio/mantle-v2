package derive

import (
	"bytes"
	"fmt"
	"math/big"

	legacyPredeploys "github.com/ethereum-optimism/optimism/op-bindings/predeploys"
	"github.com/ethereum-optimism/optimism/op-service/predeploys"
	"github.com/ethereum-optimism/optimism/op-service/solabi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
)

const UpgradeToFuncSignature = "upgradeTo(address)"

var (
	UpgradeToFuncBytes4 = crypto.Keccak256([]byte(UpgradeToFuncSignature))[:4]

	// EIP-4788
	beaconBlockRootDeployerSource     = UpgradeDepositSource{Intent: "Skadi: EIP-4788 Contract Deployment"}
	beaconBlockRootDeploymentBytecode = common.FromHex("0x60618060095f395ff33373fffffffffffffffffffffffffffffffffffffffe14604d57602036146024575f5ffd5b5f35801560495762001fff810690815414603c575f5ffd5b62001fff01545f5260205ff35b5f5ffd5b62001fff42064281555f359062001fff015500")

	// EIP-2935
	blockHashDeployerSource     = UpgradeDepositSource{Intent: "Skadi: EIP-2935 Contract Deployment"}
	blockHashDeploymentBytecode = common.FromHex("0x60538060095f395ff33373fffffffffffffffffffffffffffffffffffffffe14604657602036036042575f35600143038111604257611fff81430311604257611fff9006545f5260205ff35b5f5ffd5b5f35611fff60014303065500")

	// Gas Price Oracle Parameters
	deployIsthmusGasPriceOracleSource  = UpgradeDepositSource{Intent: "Skadi: Gas Price Oracle Deployment"}
	updateIsthmusGasPriceOracleSource  = UpgradeDepositSource{Intent: "Skadi: Gas Price Oracle Proxy Update"}
	GasPriceOracleSkadiDeployerAddress = common.HexToAddress("0x420000000000000000000000000000000000000F")
	skadiGasPriceOracleAddress         = crypto.CreateAddress(GasPriceOracleSkadiDeployerAddress, 0)

	// Bytecode
	gasPriceOracleSkadiDeploymentBytecode = common.FromHex("0x60e060405234801561001057600080fd5b506001608081905260a052600060c05260805160a05160c05161141c61004f60003960006105fd015260006105d4015260006105ab015261141c6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c8063570ca735116100e3578063dab3b3da1161008c578063f2fde38b11610066578063f2fde38b14610329578063f45e65d81461033c578063fe173b97146102af57600080fd5b8063dab3b3da146102f0578063de26c4a114610303578063e38e91f91461031657600080fd5b80638da5cb5b116100bd5780638da5cb5b146102b5578063b3ab15fb146102d5578063cdb07f18146102e857600080fd5b8063570ca735146102575780635d71ff8f1461029c5780636ef25c3a146102af57600080fd5b806332e70fea11610145578063519b4bd31161011f578063519b4bd31461021d57806354fd4d5014610225578063569766581461023a57600080fd5b806332e70fea146101ec57806349948e0e146102015780634d5d9a2a1461021457600080fd5b8063275aedd211610176578063275aedd2146101ca5780632e0f2625146101dd578063313ce567146101e557600080fd5b806306f837d31461019d5780630c18c162146101b957806316d3bc7f146101c1575b600080fd5b6101a660005481565b6040519081526020015b60405180910390f35b6101a6610344565b6101a660035481565b6101a66101d8366004610f26565b6103ec565b6101a6600681565b60066101a6565b6101ff6101fa366004610f26565b61045a565b005b6101a661020f366004610f6e565b610514565b6101a660045481565b6101a661051f565b61022d6105a4565b6040516101b0919061106d565b600f546102479060ff1681565b60405190151581526020016101b0565b6002546102779073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b0565b6101ff6102aa366004610f26565b610647565b486101a6565b6001546102779073ffffffffffffffffffffffffffffffffffffffff1681565b6101ff6102e33660046110be565b610701565b6101ff6107f9565b6101a66102fe366004610f26565b61093a565b6101a6610311366004610f6e565b610951565b6101ff610324366004610f26565b61096e565b6101ff6103373660046110be565b610a26565b6101a6610b9b565b600f5460009060ff16156103df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f47617350726963654f7261636c653a206f76657268656164282920697320646560448201527f707265636174656400000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103e7610c39565b905090565b600f5460009060ff1661040157506000919050565b6004546104549061044590620f4240907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8615878302888104909314170117611159565b60035481019081106000031790565b92915050565b60025473ffffffffffffffffffffffffffffffffffffffff1633146104db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064016103d6565b6003805490829055604051829082907f08a9bc8992a7c4fa053bafee70f234ebf754c491d16759a28adf47e3cd9375b990600090a35050565b600061045482610c9a565b600073420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16635cf249696040518163ffffffff1660e01b8152600401602060405180830381865afa158015610580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e7919061116d565b60606105cf7f0000000000000000000000000000000000000000000000000000000000000000610d00565b6105f87f0000000000000000000000000000000000000000000000000000000000000000610d00565b6106217f0000000000000000000000000000000000000000000000000000000000000000610d00565b60405160200161063393929190611186565b604051602081830303815290604052905090565b60025473ffffffffffffffffffffffffffffffffffffffff1633146106c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064016103d6565b6004805490829055604051829082907f977ba0b597123a7c26f0d57b10b1ab88e14d4e8676e6629640df681ccf5ffcf290600090a35050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064016103d6565b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907ffbe5b6cbafb274f445d7fed869dc77a838d8243a22c460de156560e8857cad0390600090a35050565b60025473ffffffffffffffffffffffffffffffffffffffff16331461087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064016103d6565b600f5460ff161561090d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f47617350726963654f7261636c653a204973536b61646920616c72656164792060448201527f736574000000000000000000000000000000000000000000000000000000000060648201526084016103d6565b600f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b600581600a811061094a57600080fd5b0154905081565b600061095b610c39565b61096483610e35565b61045491906111fc565b60025473ffffffffffffffffffffffffffffffffffffffff1633146109ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616c6c6572206973206e6f7420746865206f70657261746f7200000000000060448201526064016103d6565b600080548282556040519091839183917f5d6ae9db2d6725497bed0302a8212c0db5fdb3bd7d14f188a83b5589089caafd91a35050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610aa7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064016103d6565b73ffffffffffffffffffffffffffffffffffffffff8116610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e6577206f776e657220697320746865207a65726f206164647265737300000060448201526064016103d6565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600f5460009060ff1615610c31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f47617350726963654f7261636c653a207363616c61722829206973206465707260448201527f656361746564000000000000000000000000000000000000000000000000000060648201526084016103d6565b6103e7610ec5565b600073420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16638b239f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015610580573d6000803e3d6000fd5b600080610ca683610e35565b90506000610cb2610ec5565b610cba61051f565b610cc2610c39565b610ccc90856111fc565b610cd69190611214565b610ce09190611214565b9050610cee6006600a611371565b610cf89082611159565b949350505050565b606081600003610d4357505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610d6d5780610d578161137d565b9150610d669050600a83611159565b9150610d47565b60008167ffffffffffffffff811115610d8857610d88610f3f565b6040519080825280601f01601f191660200182016040528015610db2576020820181803683370190505b5090505b8415610cf857610dc76001836113b5565b9150610dd4600a866113cc565b610ddf9060306111fc565b60f81b818381518110610df457610df46113e0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610e2e600a86611159565b9450610db6565b80516000908190815b81811015610eb857848181518110610e5857610e586113e0565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016600003610e9857610e916004846111fc565b9250610ea6565b610ea36010846111fc565b92505b80610eb08161137d565b915050610e3e565b50610cf8826104406111fc565b600073420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16639e8c49666040518163ffffffff1660e01b8152600401602060405180830381865afa158015610580573d6000803e3d6000fd5b600060208284031215610f3857600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215610f8057600080fd5b813567ffffffffffffffff80821115610f9857600080fd5b818401915084601f830112610fac57600080fd5b813581811115610fbe57610fbe610f3f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561100457611004610f3f565b8160405282815287602084870101111561101d57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60005b83811015611058578181015183820152602001611040565b83811115611067576000848401525b50505050565b602081526000825180602084015261108c81604085016020870161103d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000602082840312156110d057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146110f457600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082611168576111686110fb565b500490565b60006020828403121561117f57600080fd5b5051919050565b6000845161119881846020890161103d565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516111d4816001850160208a0161103d565b600192019182015283516111ef81600284016020880161103d565b0160020195945050505050565b6000821982111561120f5761120f61112a565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561124c5761124c61112a565b500290565b600181815b808511156112aa57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156112905761129061112a565b8085161561129d57918102915b93841c9390800290611256565b509250929050565b6000826112c157506001610454565b816112ce57506000610454565b81600181146112e457600281146112ee5761130a565b6001915050610454565b60ff8411156112ff576112ff61112a565b50506001821b610454565b5060208310610133831016604e8410600b841016171561132d575081810a610454565b6113378383611251565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156113695761136961112a565b029392505050565b60006110f483836112b2565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113ae576113ae61112a565b5060010190565b6000828210156113c7576113c761112a565b500390565b6000826113db576113db6110fb565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea164736f6c634300080f000a")

	// Enable Skadi Parameters
	enableSkadiSource = UpgradeDepositSource{Intent: "Skadi: Gas Price Oracle Set Skadi"}
	enableSkadiInput  = crypto.Keccak256([]byte("setSkadi()"))[:4]
)

func MantleSkadiNetworkUpgradeTransactions() ([]hexutil.Bytes, error) {
	upgradeTxns := make([]hexutil.Bytes, 0, 5)

	// Deploy Gas Price Oracle transaction
	deployGasPriceOracle, err := types.NewTx(&types.DepositTx{
		SourceHash:          deployIsthmusGasPriceOracleSource.SourceHash(),
		From:                GasPriceOracleSkadiDeployerAddress,
		To:                  nil,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 1_625_000,
		IsSystemTransaction: false,
		Data:                gasPriceOracleSkadiDeploymentBytecode,
	}).MarshalBinary()

	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, deployGasPriceOracle)

	// Deploy Gas Price Oracle Proxy upgrade transaction
	updateGasPriceOracleProxy, err := types.NewTx(&types.DepositTx{
		SourceHash:          updateIsthmusGasPriceOracleSource.SourceHash(),
		From:                common.Address{},
		To:                  &legacyPredeploys.GasPriceOracleAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 50_000,
		IsSystemTransaction: false,
		Data:                upgradeToCalldata(skadiGasPriceOracleAddress),
	}).MarshalBinary()

	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, updateGasPriceOracleProxy)

	// Enable Skadi transaction
	enableSkadi, err := types.NewTx(&types.DepositTx{
		SourceHash:          enableSkadiSource.SourceHash(),
		From:                L1InfoDepositerAddress,
		To:                  &legacyPredeploys.GasPriceOracleAddr,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 90_000,
		IsSystemTransaction: false,
		Data:                enableSkadiInput,
	}).MarshalBinary()

	if err != nil {
		return nil, err
	}

	upgradeTxns = append(upgradeTxns, enableSkadi)

	deployBeaconBlockRootsContract, err := types.NewTx(&types.DepositTx{
		SourceHash:          beaconBlockRootDeployerSource.SourceHash(),
		From:                predeploys.EIP4788ContractDeployer,
		To:                  nil,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 250_000,
		IsSystemTransaction: false,
		Data:                beaconBlockRootDeploymentBytecode,
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}
	upgradeTxns = append(upgradeTxns, deployBeaconBlockRootsContract)

	deployHistoricalBlockHashesContract, err := types.NewTx(&types.DepositTx{
		SourceHash:          blockHashDeployerSource.SourceHash(),
		From:                predeploys.EIP2935ContractDeployer,
		To:                  nil,
		Mint:                big.NewInt(0),
		Value:               big.NewInt(0),
		Gas:                 250_000,
		IsSystemTransaction: false,
		Data:                blockHashDeploymentBytecode,
	}).MarshalBinary()
	if err != nil {
		return nil, err
	}
	upgradeTxns = append(upgradeTxns, deployHistoricalBlockHashesContract)

	return upgradeTxns, nil
}

func upgradeToCalldata(addr common.Address) []byte {
	buf := bytes.NewBuffer(make([]byte, 0, 4+20))
	if err := solabi.WriteSignature(buf, UpgradeToFuncBytes4); err != nil {
		panic(fmt.Errorf("failed to write upgradeTo signature data: %w", err))
	}
	if err := solabi.WriteAddress(buf, addr); err != nil {
		panic(fmt.Errorf("failed to write upgradeTo address data: %w", err))
	}
	return buf.Bytes()
}
