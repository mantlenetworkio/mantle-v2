// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ERC20VotesUpgradeableCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesUpgradeableCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// L1MantleTokenMetaData contains all meta data concerning the L1MantleToken contract.
var L1MantleTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MantleToken_ImproperlyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumAmount\",\"type\":\"uint256\"}],\"name\":\"MantleToken_MintAmountTooLarge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumNumerator\",\"type\":\"uint256\"}],\"name\":\"MantleToken_MintCapNumeratorTooLarge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextMintTimestamp\",\"type\":\"uint256\"}],\"name\":\"MantleToken_NextMintTimestampNotElapsed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMintCapNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintCapNumerator\",\"type\":\"uint256\"}],\"name\":\"MintCapNumeratorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_CAP_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_CAP_MAX_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_MINT_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"structERC20VotesUpgradeable.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCapNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintCapNumerator\",\"type\":\"uint256\"}],\"name\":\"setMintCapNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a060405260c86080523480156200001657600080fd5b50620000216200004e565b6200004833620000346012600a62000824565b620000429061271062000832565b62000111565b6200088e565b600054610100900460ff1615620000bc5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b60648201526084015b60405180910390fd5b60005460ff90811610156200010f576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6200012882826200012c60201b620013801760201c565b5050565b620001438282620001e060201b6200144d1760201c565b6001600160e01b0362000157620002cf8216565b1115620001c05760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b6064820152608401620000b3565b620001da61013262001575620002d560201b1783620002ec565b50505050565b6001600160a01b038216620002385760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401620000b3565b80603560008282546200024c91906200084c565b90915550506001600160a01b038216600090815260336020526040812080548392906200027b9084906200084c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36200012860008383620004a3565b60355490565b6000620002e382846200084c565b90505b92915050565b8254600090819080156200033e57856200030860018362000862565b815481106200031b576200031b62000878565b60009182526020909120015464010000000090046001600160e01b031662000341565b60005b6001600160e01b031692506200035883858760201c565b91506000811180156200039c575043866200037560018462000862565b8154811062000388576200038862000878565b60009182526020909120015463ffffffff16145b156200041057620003b882620004bb60201b620015811760201c565b86620003c660018462000862565b81548110620003d957620003d962000878565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b0316021790555062000495565b85604051806040016040528062000432436200052a60201b620016331760201c565b63ffffffff1681526020016200045385620004bb60201b620015811760201c565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b505050565b6200049e8383836200059160201b620016c91760201c565b60006001600160e01b03821115620005265760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401620000b3565b5090565b600063ffffffff821115620005265760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401620000b3565b620005a98383836200049e60201b620009471760201c565b6001600160a01b03838116600090815261013060205260408082205485841683529120546200049e92918216911683818314801590620005e95750600081115b156200049e576001600160a01b0383161562000677576001600160a01b0383166000908152610131602090815260408220829162000634919062000703901b620017091785620002ec565b91509150846001600160a01b031660008051602062003c4283398151915283836040516200066c929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156200049e576001600160a01b03821660009081526101316020908152604082208291620006bc9190620002d5901b620015751785620002ec565b91509150836001600160a01b031660008051602062003c428339815191528383604051620006f4929190918252602082015260400190565b60405180910390a25050505050565b6000620002e3828462000862565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620007685781600019048211156200074c576200074c62000711565b808516156200075a57918102915b93841c93908002906200072c565b509250929050565b6000826200078157506001620002e6565b816200079057506000620002e6565b8160018114620007a95760028114620007b457620007d4565b6001915050620002e6565b60ff841115620007c857620007c862000711565b50506001821b620002e6565b5060208310610133831016604e8410600b8410161715620007f9575081810a620002e6565b62000805838362000727565b80600019048211156200081c576200081c62000711565b029392505050565b6000620002e3838362000770565b8082028115828204841417620002e657620002e662000711565b80820180821115620002e657620002e662000711565b81810381811115620002e657620002e662000711565b634e487b7160e01b600052603260045260246000fd5b60805161338a620008b8600039600081816105400152818161067d01526106d2015261338a6000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c806379cc679011610145578063a9f8ad04116100bd578063da35a26f1161008c578063e40172b311610071578063e40172b31461053b578063f1127ed814610562578063f2fde38b146105b457600080fd5b8063da35a26f146104e2578063dd62ed3e146104f557600080fd5b8063a9f8ad04146104a7578063c3cda520146104b2578063cf665443146104c5578063d505accf146104cf57600080fd5b80638e539e8c116101145780639ab24eb0116100f95780639ab24eb01461046e578063a457c2d714610481578063a9059cbb1461049457600080fd5b80638e539e8c1461045357806395d89b411461046657600080fd5b806379cc6790146104065780637ecebe001461041957806389110e5d1461042c5780638da5cb5b1461043557600080fd5b80633a46b1a8116101d85780635c19a95c116101a75780636fcfff451161018c5780636fcfff45146103a057806370a08231146103c8578063715018a6146103fe57600080fd5b80635c19a95c146103835780636561e2111461039657600080fd5b80633a46b1a8146102eb57806340c10f19146102fe57806342966c6814610311578063587cde1e1461032457600080fd5b806323b872dd1161021457806323b872dd146102ae578063313ce567146102c15780633644e515146102d057806339509351146102d857600080fd5b806306fdde0314610246578063095ea7b31461026457806318160ddd146102875780631ae7f5f314610299575b600080fd5b61024e6105c7565b60405161025b9190612dfc565b60405180910390f35b610277610272366004612e91565b610659565b604051901515815260200161025b565b6035545b60405190815260200161025b565b6102ac6102a7366004612ebb565b610673565b005b6102776102bc366004612ed4565b61074b565b6040516012815260200161025b565b61028b61076f565b6102776102e6366004612e91565b61077e565b61028b6102f9366004612e91565b6107ca565b6102ac61030c366004612e91565b61086c565b6102ac61031f366004612ebb565b61094c565b61035e610332366004612f10565b73ffffffffffffffffffffffffffffffffffffffff908116600090815261013060205260409020541690565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161025b565b6102ac610391366004612f10565b610959565b61028b6101625481565b6103b36103ae366004612f10565b610963565b60405163ffffffff909116815260200161025b565b61028b6103d6366004612f10565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b6102ac610993565b6102ac610414366004612e91565b6109a7565b61028b610427366004612f10565b6109c0565b61028b61271081565b60975473ffffffffffffffffffffffffffffffffffffffff1661035e565b61028b610461366004612ebb565b6109eb565b61024e610a62565b61028b61047c366004612f10565b610a71565b61027761048f366004612e91565b610b3e565b6102776104a2366004612e91565b610c0f565b61028b6301e1338081565b6102ac6104c0366004612f3c565b610c1d565b61028b6101635481565b6102ac6104dd366004612f94565b610d94565b6102ac6104f0366004612ffe565b610f53565b61028b61050336600461302a565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020908152604080832093909416825291909152205490565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b610575610570366004613054565b611225565b60408051825163ffffffff1681526020928301517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16928101929092520161025b565b6102ac6105c2366004612f10565b6112cc565b6060603680546105d690613094565b80601f016020809104026020016040519081016040528092919081815260200182805461060290613094565b801561064f5780601f106106245761010080835404028352916020019161064f565b820191906000526020600020905b81548152906001019060200180831161063257829003601f168201915b5050505050905090565b600033610667818585611715565b60019150505b92915050565b61067b6118c8565b7f0000000000000000000000000000000000000000000000000000000000000000811115610703576040517fba96c68c000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b60405180910390fd5b610162805490829055604080518281526020810184905233917fe2ee754bdb1a4ec4a5ecd3f810e4e7ca817cbbc379c89ff4e7a8b4dc6841a766910160405180910390a25050565b600033610759858285611949565b610764858585611a1a565b506001949350505050565b6000610779611cd3565b905090565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919061066790829086906107c5908790613110565b611715565b6000438210610835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e65640060448201526064016106fa565b73ffffffffffffffffffffffffffffffffffffffff83166000908152610131602052604090206108659083611d4e565b9392505050565b6108746118c8565b60006127106101625461088660355490565b6108909190613123565b61089a919061313a565b9050808211156108e0576040517f5d84733f00000000000000000000000000000000000000000000000000000000815260048101839052602481018290526044016106fa565b6101635442101561092b57610163546040517fea14abd200000000000000000000000000000000000000000000000000000000815242600482015260248101919091526044016106fa565b6109396301e1338042613110565b610163556109478383611e35565b505050565b6109563382611e3f565b50565b6109563382611e49565b73ffffffffffffffffffffffffffffffffffffffff81166000908152610131602052604081205461066d90611633565b61099b6118c8565b6109a56000611ee9565b565b6109b2823383611949565b6109bc8282611e3f565b5050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260fd602052604081205461066d565b6000438210610a56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e65640060448201526064016106fa565b61066d61013283611d4e565b6060603780546105d690613094565b73ffffffffffffffffffffffffffffffffffffffff8116600090815261013160205260408120548015610b165773ffffffffffffffffffffffffffffffffffffffff8316600090815261013160205260409020610acf600183613175565b81548110610adf57610adf613188565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610b19565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169392505050565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610c02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106fa565b6107648286868403611715565b600033610667818585611a1a565b83421115610c87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4552433230566f7465733a207369676e6174757265206578706972656400000060448201526064016106fa565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf602082015273ffffffffffffffffffffffffffffffffffffffff8816918101919091526060810186905260808101859052600090610d0e90610d069060a00160405160208183030381529060405280519060200120611f60565b858585611fc9565b9050610d1981611ff1565b8614610d81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e63650000000000000060448201526064016106fa565b610d8b8188611e49565b50505050505050565b83421115610dfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016106fa565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610e2d8c611ff1565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610e9582611f60565b90506000610ea582878787611fc9565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016106fa565b610f478a8a8a611715565b50505050505050505050565b600054610100900460ff1615808015610f735750600054600160ff909116105b80610f8d5750303b158015610f8d575060005460ff166001145b611019576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106fa565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561107757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b821580611098575073ffffffffffffffffffffffffffffffffffffffff8216155b156110cf576040517ff57dc27600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111436040518060400160405280600681526020017f4d616e746c6500000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d4e540000000000000000000000000000000000000000000000000000000000815250612026565b61114b6120c7565b61115361215e565b6111916040518060400160405280600681526020017f4d616e746c6500000000000000000000000000000000000000000000000000008152506121fd565b6111996120c7565b6111a38284611e35565b6111b16301e1338042613110565b610163556111be82611ee9565b801561094757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b604080518082019091526000808252602082015273ffffffffffffffffffffffffffffffffffffffff8316600090815261013160205260409020805463ffffffff841690811061127757611277613188565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16918101919091529392505050565b6112d46118c8565b73ffffffffffffffffffffffffffffffffffffffff8116611377576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106fa565b61095681611ee9565b61138a828261144d565b6035547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1015611438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f7465730000000000000000000000000000000060648201526084016106fa565b611447610132611575836122d3565b50505050565b73ffffffffffffffffffffffffffffffffffffffff82166114ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106fa565b80603560008282546114dc9190613110565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604081208054839290611516908490613110565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36109bc600083836124b5565b60006108658284613110565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82111561162f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f323420626974730000000000000000000000000000000000000000000000000060648201526084016106fa565b5090565b600063ffffffff82111561162f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f322062697473000000000000000000000000000000000000000000000000000060648201526084016106fa565b73ffffffffffffffffffffffffffffffffffffffff83811660009081526101306020526040808220548584168352912054610947929182169116836124c0565b60006108658284613175565b73ffffffffffffffffffffffffffffffffffffffff83166117b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106fa565b73ffffffffffffffffffffffffffffffffffffffff821661185a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106fa565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60975473ffffffffffffffffffffffffffffffffffffffff1633146109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fa565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152603460209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146114475781811015611a0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106fa565b6114478484848403611715565b73ffffffffffffffffffffffffffffffffffffffff8316611abd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106fa565b73ffffffffffffffffffffffffffffffffffffffff8216611b60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106fa565b73ffffffffffffffffffffffffffffffffffffffff831660009081526033602052604090205481811015611c16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106fa565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260336020526040808220858503905591851681529081208054849290611c5a908490613110565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611cc091815260200190565b60405180910390a36114478484846124b5565b60006107797f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611d0260c95490565b60ca546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b8154600090815b81811015611db2576000611d698284612667565b905084868281548110611d7e57611d7e613188565b60009182526020909120015463ffffffff161115611d9e57809250611dac565b611da9816001613110565b91505b50611d55565b8115611e0b5784611dc4600184613175565b81548110611dd457611dd4613188565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611e0e565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1695945050505050565b6109bc8282611380565b6109bc8282612682565b73ffffffffffffffffffffffffffffffffffffffff82811660008181526101306020818152604080842080546033845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46114478284836124c0565b6097805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061066d611f6d611cd3565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611fda8787878761269b565b91509150611fe7816127b3565b5095945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260fd602052604090208054600181018255905b50919050565b600054610100900460ff166120bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106fa565b6109bc8282612a07565b600054610100900460ff166109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106fa565b600054610100900460ff166121f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106fa565b6109a5612ab7565b600054610100900460ff16612294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106fa565b610956816040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250612b57565b82546000908190801561233357856122ec600183613175565b815481106122fc576122fc613188565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612336565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16925061236483858763ffffffff16565b91506000811180156123a25750438661237e600184613175565b8154811061238e5761238e613188565b60009182526020909120015463ffffffff16145b1561242c576123b082611581565b866123bc600184613175565b815481106123cc576123cc613188565b9060005260206000200160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055506124ac565b85604051806040016040528061244143611633565b63ffffffff16815260200161245585611581565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b6109478383836116c9565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156124fc5750600081115b156109475773ffffffffffffffffffffffffffffffffffffffff8316156125b25773ffffffffffffffffffffffffffffffffffffffff8316600090815261013160205260408120819061255290611709856122d3565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516125a7929190918252602082015260400190565b60405180910390a250505b73ffffffffffffffffffffffffffffffffffffffff8216156109475773ffffffffffffffffffffffffffffffffffffffff8216600090815261013160205260408120819061260390611575856122d3565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612658929190918252602082015260400190565b60405180910390a25050505050565b6000612676600284841861313a565b61086590848416613110565b61268c8282612c08565b611447610132611709836122d3565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156126d257506000905060036127aa565b8460ff16601b141580156126ea57508460ff16601c14155b156126fb57506000905060046127aa565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561274f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166127a3576000600192509250506127aa565b9150600090505b94509492505050565b60008160048111156127c7576127c76131b7565b036127cf5750565b60018160048111156127e3576127e36131b7565b0361284a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106fa565b600281600481111561285e5761285e6131b7565b036128c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106fa565b60038160048111156128d9576128d96131b7565b03612966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106fa565b600481600481111561297a5761297a6131b7565b03610956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106fa565b600054610100900460ff16612a9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106fa565b6036612aaa8382613263565b5060376109478282613263565b600054610100900460ff16612b4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106fa565b6109a533611ee9565b600054610100900460ff16612bee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106fa565b81516020928301208151919092012060c99190915560ca55565b73ffffffffffffffffffffffffffffffffffffffff8216612cab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106fa565b73ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604090205481811015612d61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106fa565b73ffffffffffffffffffffffffffffffffffffffff83166000908152603360205260408120838303905560358054849290612d9d908490613175565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3610947836000846124b5565b600060208083528351808285015260005b81811015612e2957858101830151858201604001528201612e0d565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114612e8c57600080fd5b919050565b60008060408385031215612ea457600080fd5b612ead83612e68565b946020939093013593505050565b600060208284031215612ecd57600080fd5b5035919050565b600080600060608486031215612ee957600080fd5b612ef284612e68565b9250612f0060208501612e68565b9150604084013590509250925092565b600060208284031215612f2257600080fd5b61086582612e68565b803560ff81168114612e8c57600080fd5b60008060008060008060c08789031215612f5557600080fd5b612f5e87612e68565b95506020870135945060408701359350612f7a60608801612f2b565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a031215612faf57600080fd5b612fb888612e68565b9650612fc660208901612e68565b95506040880135945060608801359350612fe260808901612f2b565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561301157600080fd5b8235915061302160208401612e68565b90509250929050565b6000806040838503121561303d57600080fd5b61304683612e68565b915061302160208401612e68565b6000806040838503121561306757600080fd5b61307083612e68565b9150602083013563ffffffff8116811461308957600080fd5b809150509250929050565b600181811c908216806130a857607f821691505b602082108103612020577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561066d5761066d6130e1565b808202811582820484141761066d5761066d6130e1565b600082613170577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561066d5761066d6130e1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f82111561094757600081815260208120601f850160051c8101602086101561323c5750805b601f850160051c820191505b8181101561325b57828155600101613248565b505050505050565b815167ffffffffffffffff81111561327d5761327d6131e6565b6132918161328b8454613094565b84613215565b602080601f8311600181146132e457600084156132ae5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561325b565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561333157888601518255948401946001909101908401613312565b508582101561336d57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b0190555056fea164736f6c6343000812000adec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724",
}

// L1MantleTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use L1MantleTokenMetaData.ABI instead.
var L1MantleTokenABI = L1MantleTokenMetaData.ABI

// L1MantleTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L1MantleTokenMetaData.Bin instead.
var L1MantleTokenBin = L1MantleTokenMetaData.Bin

// DeployL1MantleToken deploys a new Ethereum contract, binding an instance of L1MantleToken to it.
func DeployL1MantleToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *L1MantleToken, error) {
	parsed, err := L1MantleTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L1MantleTokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L1MantleToken{L1MantleTokenCaller: L1MantleTokenCaller{contract: contract}, L1MantleTokenTransactor: L1MantleTokenTransactor{contract: contract}, L1MantleTokenFilterer: L1MantleTokenFilterer{contract: contract}}, nil
}

// L1MantleToken is an auto generated Go binding around an Ethereum contract.
type L1MantleToken struct {
	L1MantleTokenCaller     // Read-only binding to the contract
	L1MantleTokenTransactor // Write-only binding to the contract
	L1MantleTokenFilterer   // Log filterer for contract events
}

// L1MantleTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type L1MantleTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1MantleTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L1MantleTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1MantleTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L1MantleTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L1MantleTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L1MantleTokenSession struct {
	Contract     *L1MantleToken    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// L1MantleTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L1MantleTokenCallerSession struct {
	Contract *L1MantleTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// L1MantleTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L1MantleTokenTransactorSession struct {
	Contract     *L1MantleTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// L1MantleTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type L1MantleTokenRaw struct {
	Contract *L1MantleToken // Generic contract binding to access the raw methods on
}

// L1MantleTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L1MantleTokenCallerRaw struct {
	Contract *L1MantleTokenCaller // Generic read-only contract binding to access the raw methods on
}

// L1MantleTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L1MantleTokenTransactorRaw struct {
	Contract *L1MantleTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL1MantleToken creates a new instance of L1MantleToken, bound to a specific deployed contract.
func NewL1MantleToken(address common.Address, backend bind.ContractBackend) (*L1MantleToken, error) {
	contract, err := bindL1MantleToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L1MantleToken{L1MantleTokenCaller: L1MantleTokenCaller{contract: contract}, L1MantleTokenTransactor: L1MantleTokenTransactor{contract: contract}, L1MantleTokenFilterer: L1MantleTokenFilterer{contract: contract}}, nil
}

// NewL1MantleTokenCaller creates a new read-only instance of L1MantleToken, bound to a specific deployed contract.
func NewL1MantleTokenCaller(address common.Address, caller bind.ContractCaller) (*L1MantleTokenCaller, error) {
	contract, err := bindL1MantleToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L1MantleTokenCaller{contract: contract}, nil
}

// NewL1MantleTokenTransactor creates a new write-only instance of L1MantleToken, bound to a specific deployed contract.
func NewL1MantleTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*L1MantleTokenTransactor, error) {
	contract, err := bindL1MantleToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L1MantleTokenTransactor{contract: contract}, nil
}

// NewL1MantleTokenFilterer creates a new log filterer instance of L1MantleToken, bound to a specific deployed contract.
func NewL1MantleTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*L1MantleTokenFilterer, error) {
	contract, err := bindL1MantleToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L1MantleTokenFilterer{contract: contract}, nil
}

// bindL1MantleToken binds a generic wrapper to an already deployed contract.
func bindL1MantleToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L1MantleTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1MantleToken *L1MantleTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1MantleToken.Contract.L1MantleTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1MantleToken *L1MantleTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1MantleToken.Contract.L1MantleTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1MantleToken *L1MantleTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1MantleToken.Contract.L1MantleTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L1MantleToken *L1MantleTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L1MantleToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L1MantleToken *L1MantleTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1MantleToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L1MantleToken *L1MantleTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L1MantleToken.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_L1MantleToken *L1MantleTokenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_L1MantleToken *L1MantleTokenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _L1MantleToken.Contract.DOMAINSEPARATOR(&_L1MantleToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_L1MantleToken *L1MantleTokenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _L1MantleToken.Contract.DOMAINSEPARATOR(&_L1MantleToken.CallOpts)
}

// MINTCAPDENOMINATOR is a free data retrieval call binding the contract method 0x89110e5d.
//
// Solidity: function MINT_CAP_DENOMINATOR() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) MINTCAPDENOMINATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "MINT_CAP_DENOMINATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTCAPDENOMINATOR is a free data retrieval call binding the contract method 0x89110e5d.
//
// Solidity: function MINT_CAP_DENOMINATOR() view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) MINTCAPDENOMINATOR() (*big.Int, error) {
	return _L1MantleToken.Contract.MINTCAPDENOMINATOR(&_L1MantleToken.CallOpts)
}

// MINTCAPDENOMINATOR is a free data retrieval call binding the contract method 0x89110e5d.
//
// Solidity: function MINT_CAP_DENOMINATOR() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) MINTCAPDENOMINATOR() (*big.Int, error) {
	return _L1MantleToken.Contract.MINTCAPDENOMINATOR(&_L1MantleToken.CallOpts)
}

// MINTCAPMAXNUMERATOR is a free data retrieval call binding the contract method 0xe40172b3.
//
// Solidity: function MINT_CAP_MAX_NUMERATOR() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) MINTCAPMAXNUMERATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "MINT_CAP_MAX_NUMERATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTCAPMAXNUMERATOR is a free data retrieval call binding the contract method 0xe40172b3.
//
// Solidity: function MINT_CAP_MAX_NUMERATOR() view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) MINTCAPMAXNUMERATOR() (*big.Int, error) {
	return _L1MantleToken.Contract.MINTCAPMAXNUMERATOR(&_L1MantleToken.CallOpts)
}

// MINTCAPMAXNUMERATOR is a free data retrieval call binding the contract method 0xe40172b3.
//
// Solidity: function MINT_CAP_MAX_NUMERATOR() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) MINTCAPMAXNUMERATOR() (*big.Int, error) {
	return _L1MantleToken.Contract.MINTCAPMAXNUMERATOR(&_L1MantleToken.CallOpts)
}

// MINMINTINTERVAL is a free data retrieval call binding the contract method 0xa9f8ad04.
//
// Solidity: function MIN_MINT_INTERVAL() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) MINMINTINTERVAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "MIN_MINT_INTERVAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINMINTINTERVAL is a free data retrieval call binding the contract method 0xa9f8ad04.
//
// Solidity: function MIN_MINT_INTERVAL() view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) MINMINTINTERVAL() (*big.Int, error) {
	return _L1MantleToken.Contract.MINMINTINTERVAL(&_L1MantleToken.CallOpts)
}

// MINMINTINTERVAL is a free data retrieval call binding the contract method 0xa9f8ad04.
//
// Solidity: function MIN_MINT_INTERVAL() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) MINMINTINTERVAL() (*big.Int, error) {
	return _L1MantleToken.Contract.MINMINTINTERVAL(&_L1MantleToken.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _L1MantleToken.Contract.Allowance(&_L1MantleToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _L1MantleToken.Contract.Allowance(&_L1MantleToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _L1MantleToken.Contract.BalanceOf(&_L1MantleToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _L1MantleToken.Contract.BalanceOf(&_L1MantleToken.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_L1MantleToken *L1MantleTokenCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesUpgradeableCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesUpgradeableCheckpoint)).(*ERC20VotesUpgradeableCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_L1MantleToken *L1MantleTokenSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _L1MantleToken.Contract.Checkpoints(&_L1MantleToken.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_L1MantleToken *L1MantleTokenCallerSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _L1MantleToken.Contract.Checkpoints(&_L1MantleToken.CallOpts, account, pos)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_L1MantleToken *L1MantleTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_L1MantleToken *L1MantleTokenSession) Decimals() (uint8, error) {
	return _L1MantleToken.Contract.Decimals(&_L1MantleToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_L1MantleToken *L1MantleTokenCallerSession) Decimals() (uint8, error) {
	return _L1MantleToken.Contract.Decimals(&_L1MantleToken.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_L1MantleToken *L1MantleTokenCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_L1MantleToken *L1MantleTokenSession) Delegates(account common.Address) (common.Address, error) {
	return _L1MantleToken.Contract.Delegates(&_L1MantleToken.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_L1MantleToken *L1MantleTokenCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _L1MantleToken.Contract.Delegates(&_L1MantleToken.CallOpts, account)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) GetPastTotalSupply(opts *bind.CallOpts, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "getPastTotalSupply", blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _L1MantleToken.Contract.GetPastTotalSupply(&_L1MantleToken.CallOpts, blockNumber)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _L1MantleToken.Contract.GetPastTotalSupply(&_L1MantleToken.CallOpts, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "getPastVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _L1MantleToken.Contract.GetPastVotes(&_L1MantleToken.CallOpts, account, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _L1MantleToken.Contract.GetPastVotes(&_L1MantleToken.CallOpts, account, blockNumber)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) GetVotes(account common.Address) (*big.Int, error) {
	return _L1MantleToken.Contract.GetVotes(&_L1MantleToken.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _L1MantleToken.Contract.GetVotes(&_L1MantleToken.CallOpts, account)
}

// MintCapNumerator is a free data retrieval call binding the contract method 0x6561e211.
//
// Solidity: function mintCapNumerator() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) MintCapNumerator(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "mintCapNumerator")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MintCapNumerator is a free data retrieval call binding the contract method 0x6561e211.
//
// Solidity: function mintCapNumerator() view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) MintCapNumerator() (*big.Int, error) {
	return _L1MantleToken.Contract.MintCapNumerator(&_L1MantleToken.CallOpts)
}

// MintCapNumerator is a free data retrieval call binding the contract method 0x6561e211.
//
// Solidity: function mintCapNumerator() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) MintCapNumerator() (*big.Int, error) {
	return _L1MantleToken.Contract.MintCapNumerator(&_L1MantleToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_L1MantleToken *L1MantleTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_L1MantleToken *L1MantleTokenSession) Name() (string, error) {
	return _L1MantleToken.Contract.Name(&_L1MantleToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_L1MantleToken *L1MantleTokenCallerSession) Name() (string, error) {
	return _L1MantleToken.Contract.Name(&_L1MantleToken.CallOpts)
}

// NextMint is a free data retrieval call binding the contract method 0xcf665443.
//
// Solidity: function nextMint() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) NextMint(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "nextMint")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextMint is a free data retrieval call binding the contract method 0xcf665443.
//
// Solidity: function nextMint() view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) NextMint() (*big.Int, error) {
	return _L1MantleToken.Contract.NextMint(&_L1MantleToken.CallOpts)
}

// NextMint is a free data retrieval call binding the contract method 0xcf665443.
//
// Solidity: function nextMint() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) NextMint() (*big.Int, error) {
	return _L1MantleToken.Contract.NextMint(&_L1MantleToken.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) Nonces(owner common.Address) (*big.Int, error) {
	return _L1MantleToken.Contract.Nonces(&_L1MantleToken.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _L1MantleToken.Contract.Nonces(&_L1MantleToken.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_L1MantleToken *L1MantleTokenCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_L1MantleToken *L1MantleTokenSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _L1MantleToken.Contract.NumCheckpoints(&_L1MantleToken.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_L1MantleToken *L1MantleTokenCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _L1MantleToken.Contract.NumCheckpoints(&_L1MantleToken.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1MantleToken *L1MantleTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1MantleToken *L1MantleTokenSession) Owner() (common.Address, error) {
	return _L1MantleToken.Contract.Owner(&_L1MantleToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L1MantleToken *L1MantleTokenCallerSession) Owner() (common.Address, error) {
	return _L1MantleToken.Contract.Owner(&_L1MantleToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_L1MantleToken *L1MantleTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_L1MantleToken *L1MantleTokenSession) Symbol() (string, error) {
	return _L1MantleToken.Contract.Symbol(&_L1MantleToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_L1MantleToken *L1MantleTokenCallerSession) Symbol() (string, error) {
	return _L1MantleToken.Contract.Symbol(&_L1MantleToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L1MantleToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_L1MantleToken *L1MantleTokenSession) TotalSupply() (*big.Int, error) {
	return _L1MantleToken.Contract.TotalSupply(&_L1MantleToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_L1MantleToken *L1MantleTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _L1MantleToken.Contract.TotalSupply(&_L1MantleToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_L1MantleToken *L1MantleTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_L1MantleToken *L1MantleTokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Approve(&_L1MantleToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_L1MantleToken *L1MantleTokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Approve(&_L1MantleToken.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_L1MantleToken *L1MantleTokenTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_L1MantleToken *L1MantleTokenSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Burn(&_L1MantleToken.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_L1MantleToken *L1MantleTokenTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Burn(&_L1MantleToken.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_L1MantleToken *L1MantleTokenTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_L1MantleToken *L1MantleTokenSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.BurnFrom(&_L1MantleToken.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_L1MantleToken *L1MantleTokenTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.BurnFrom(&_L1MantleToken.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_L1MantleToken *L1MantleTokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_L1MantleToken *L1MantleTokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.DecreaseAllowance(&_L1MantleToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_L1MantleToken *L1MantleTokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.DecreaseAllowance(&_L1MantleToken.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_L1MantleToken *L1MantleTokenTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_L1MantleToken *L1MantleTokenSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Delegate(&_L1MantleToken.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_L1MantleToken *L1MantleTokenTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Delegate(&_L1MantleToken.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_L1MantleToken *L1MantleTokenTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_L1MantleToken *L1MantleTokenSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _L1MantleToken.Contract.DelegateBySig(&_L1MantleToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_L1MantleToken *L1MantleTokenTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _L1MantleToken.Contract.DelegateBySig(&_L1MantleToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_L1MantleToken *L1MantleTokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_L1MantleToken *L1MantleTokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.IncreaseAllowance(&_L1MantleToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_L1MantleToken *L1MantleTokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.IncreaseAllowance(&_L1MantleToken.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _initialSupply, address _owner) returns()
func (_L1MantleToken *L1MantleTokenTransactor) Initialize(opts *bind.TransactOpts, _initialSupply *big.Int, _owner common.Address) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "initialize", _initialSupply, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _initialSupply, address _owner) returns()
func (_L1MantleToken *L1MantleTokenSession) Initialize(_initialSupply *big.Int, _owner common.Address) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Initialize(&_L1MantleToken.TransactOpts, _initialSupply, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _initialSupply, address _owner) returns()
func (_L1MantleToken *L1MantleTokenTransactorSession) Initialize(_initialSupply *big.Int, _owner common.Address) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Initialize(&_L1MantleToken.TransactOpts, _initialSupply, _owner)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _recipient, uint256 _amount) returns()
func (_L1MantleToken *L1MantleTokenTransactor) Mint(opts *bind.TransactOpts, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "mint", _recipient, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _recipient, uint256 _amount) returns()
func (_L1MantleToken *L1MantleTokenSession) Mint(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Mint(&_L1MantleToken.TransactOpts, _recipient, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _recipient, uint256 _amount) returns()
func (_L1MantleToken *L1MantleTokenTransactorSession) Mint(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Mint(&_L1MantleToken.TransactOpts, _recipient, _amount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_L1MantleToken *L1MantleTokenTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_L1MantleToken *L1MantleTokenSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Permit(&_L1MantleToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_L1MantleToken *L1MantleTokenTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Permit(&_L1MantleToken.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1MantleToken *L1MantleTokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1MantleToken *L1MantleTokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _L1MantleToken.Contract.RenounceOwnership(&_L1MantleToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L1MantleToken *L1MantleTokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _L1MantleToken.Contract.RenounceOwnership(&_L1MantleToken.TransactOpts)
}

// SetMintCapNumerator is a paid mutator transaction binding the contract method 0x1ae7f5f3.
//
// Solidity: function setMintCapNumerator(uint256 _mintCapNumerator) returns()
func (_L1MantleToken *L1MantleTokenTransactor) SetMintCapNumerator(opts *bind.TransactOpts, _mintCapNumerator *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "setMintCapNumerator", _mintCapNumerator)
}

// SetMintCapNumerator is a paid mutator transaction binding the contract method 0x1ae7f5f3.
//
// Solidity: function setMintCapNumerator(uint256 _mintCapNumerator) returns()
func (_L1MantleToken *L1MantleTokenSession) SetMintCapNumerator(_mintCapNumerator *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.SetMintCapNumerator(&_L1MantleToken.TransactOpts, _mintCapNumerator)
}

// SetMintCapNumerator is a paid mutator transaction binding the contract method 0x1ae7f5f3.
//
// Solidity: function setMintCapNumerator(uint256 _mintCapNumerator) returns()
func (_L1MantleToken *L1MantleTokenTransactorSession) SetMintCapNumerator(_mintCapNumerator *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.SetMintCapNumerator(&_L1MantleToken.TransactOpts, _mintCapNumerator)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_L1MantleToken *L1MantleTokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_L1MantleToken *L1MantleTokenSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Transfer(&_L1MantleToken.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_L1MantleToken *L1MantleTokenTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.Transfer(&_L1MantleToken.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_L1MantleToken *L1MantleTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_L1MantleToken *L1MantleTokenSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.TransferFrom(&_L1MantleToken.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_L1MantleToken *L1MantleTokenTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _L1MantleToken.Contract.TransferFrom(&_L1MantleToken.TransactOpts, from, to, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1MantleToken *L1MantleTokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _L1MantleToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1MantleToken *L1MantleTokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1MantleToken.Contract.TransferOwnership(&_L1MantleToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L1MantleToken *L1MantleTokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L1MantleToken.Contract.TransferOwnership(&_L1MantleToken.TransactOpts, newOwner)
}

// L1MantleTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the L1MantleToken contract.
type L1MantleTokenApprovalIterator struct {
	Event *L1MantleTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1MantleTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1MantleTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1MantleTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1MantleTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1MantleTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1MantleTokenApproval represents a Approval event raised by the L1MantleToken contract.
type L1MantleTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_L1MantleToken *L1MantleTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*L1MantleTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _L1MantleToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &L1MantleTokenApprovalIterator{contract: _L1MantleToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_L1MantleToken *L1MantleTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *L1MantleTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _L1MantleToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1MantleTokenApproval)
				if err := _L1MantleToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_L1MantleToken *L1MantleTokenFilterer) ParseApproval(log types.Log) (*L1MantleTokenApproval, error) {
	event := new(L1MantleTokenApproval)
	if err := _L1MantleToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1MantleTokenDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the L1MantleToken contract.
type L1MantleTokenDelegateChangedIterator struct {
	Event *L1MantleTokenDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1MantleTokenDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1MantleTokenDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1MantleTokenDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1MantleTokenDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1MantleTokenDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1MantleTokenDelegateChanged represents a DelegateChanged event raised by the L1MantleToken contract.
type L1MantleTokenDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_L1MantleToken *L1MantleTokenFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*L1MantleTokenDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _L1MantleToken.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &L1MantleTokenDelegateChangedIterator{contract: _L1MantleToken.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_L1MantleToken *L1MantleTokenFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *L1MantleTokenDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _L1MantleToken.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1MantleTokenDelegateChanged)
				if err := _L1MantleToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_L1MantleToken *L1MantleTokenFilterer) ParseDelegateChanged(log types.Log) (*L1MantleTokenDelegateChanged, error) {
	event := new(L1MantleTokenDelegateChanged)
	if err := _L1MantleToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1MantleTokenDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the L1MantleToken contract.
type L1MantleTokenDelegateVotesChangedIterator struct {
	Event *L1MantleTokenDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1MantleTokenDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1MantleTokenDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1MantleTokenDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1MantleTokenDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1MantleTokenDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1MantleTokenDelegateVotesChanged represents a DelegateVotesChanged event raised by the L1MantleToken contract.
type L1MantleTokenDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_L1MantleToken *L1MantleTokenFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*L1MantleTokenDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _L1MantleToken.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &L1MantleTokenDelegateVotesChangedIterator{contract: _L1MantleToken.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_L1MantleToken *L1MantleTokenFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *L1MantleTokenDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _L1MantleToken.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1MantleTokenDelegateVotesChanged)
				if err := _L1MantleToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_L1MantleToken *L1MantleTokenFilterer) ParseDelegateVotesChanged(log types.Log) (*L1MantleTokenDelegateVotesChanged, error) {
	event := new(L1MantleTokenDelegateVotesChanged)
	if err := _L1MantleToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1MantleTokenInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the L1MantleToken contract.
type L1MantleTokenInitializedIterator struct {
	Event *L1MantleTokenInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1MantleTokenInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1MantleTokenInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1MantleTokenInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1MantleTokenInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1MantleTokenInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1MantleTokenInitialized represents a Initialized event raised by the L1MantleToken contract.
type L1MantleTokenInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1MantleToken *L1MantleTokenFilterer) FilterInitialized(opts *bind.FilterOpts) (*L1MantleTokenInitializedIterator, error) {

	logs, sub, err := _L1MantleToken.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &L1MantleTokenInitializedIterator{contract: _L1MantleToken.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1MantleToken *L1MantleTokenFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *L1MantleTokenInitialized) (event.Subscription, error) {

	logs, sub, err := _L1MantleToken.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1MantleTokenInitialized)
				if err := _L1MantleToken.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L1MantleToken *L1MantleTokenFilterer) ParseInitialized(log types.Log) (*L1MantleTokenInitialized, error) {
	event := new(L1MantleTokenInitialized)
	if err := _L1MantleToken.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1MantleTokenMintCapNumeratorChangedIterator is returned from FilterMintCapNumeratorChanged and is used to iterate over the raw logs and unpacked data for MintCapNumeratorChanged events raised by the L1MantleToken contract.
type L1MantleTokenMintCapNumeratorChangedIterator struct {
	Event *L1MantleTokenMintCapNumeratorChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1MantleTokenMintCapNumeratorChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1MantleTokenMintCapNumeratorChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1MantleTokenMintCapNumeratorChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1MantleTokenMintCapNumeratorChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1MantleTokenMintCapNumeratorChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1MantleTokenMintCapNumeratorChanged represents a MintCapNumeratorChanged event raised by the L1MantleToken contract.
type L1MantleTokenMintCapNumeratorChanged struct {
	From                     common.Address
	PreviousMintCapNumerator *big.Int
	NewMintCapNumerator      *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterMintCapNumeratorChanged is a free log retrieval operation binding the contract event 0xe2ee754bdb1a4ec4a5ecd3f810e4e7ca817cbbc379c89ff4e7a8b4dc6841a766.
//
// Solidity: event MintCapNumeratorChanged(address indexed from, uint256 previousMintCapNumerator, uint256 newMintCapNumerator)
func (_L1MantleToken *L1MantleTokenFilterer) FilterMintCapNumeratorChanged(opts *bind.FilterOpts, from []common.Address) (*L1MantleTokenMintCapNumeratorChangedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _L1MantleToken.contract.FilterLogs(opts, "MintCapNumeratorChanged", fromRule)
	if err != nil {
		return nil, err
	}
	return &L1MantleTokenMintCapNumeratorChangedIterator{contract: _L1MantleToken.contract, event: "MintCapNumeratorChanged", logs: logs, sub: sub}, nil
}

// WatchMintCapNumeratorChanged is a free log subscription operation binding the contract event 0xe2ee754bdb1a4ec4a5ecd3f810e4e7ca817cbbc379c89ff4e7a8b4dc6841a766.
//
// Solidity: event MintCapNumeratorChanged(address indexed from, uint256 previousMintCapNumerator, uint256 newMintCapNumerator)
func (_L1MantleToken *L1MantleTokenFilterer) WatchMintCapNumeratorChanged(opts *bind.WatchOpts, sink chan<- *L1MantleTokenMintCapNumeratorChanged, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _L1MantleToken.contract.WatchLogs(opts, "MintCapNumeratorChanged", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1MantleTokenMintCapNumeratorChanged)
				if err := _L1MantleToken.contract.UnpackLog(event, "MintCapNumeratorChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintCapNumeratorChanged is a log parse operation binding the contract event 0xe2ee754bdb1a4ec4a5ecd3f810e4e7ca817cbbc379c89ff4e7a8b4dc6841a766.
//
// Solidity: event MintCapNumeratorChanged(address indexed from, uint256 previousMintCapNumerator, uint256 newMintCapNumerator)
func (_L1MantleToken *L1MantleTokenFilterer) ParseMintCapNumeratorChanged(log types.Log) (*L1MantleTokenMintCapNumeratorChanged, error) {
	event := new(L1MantleTokenMintCapNumeratorChanged)
	if err := _L1MantleToken.contract.UnpackLog(event, "MintCapNumeratorChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1MantleTokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the L1MantleToken contract.
type L1MantleTokenOwnershipTransferredIterator struct {
	Event *L1MantleTokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1MantleTokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1MantleTokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1MantleTokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1MantleTokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1MantleTokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1MantleTokenOwnershipTransferred represents a OwnershipTransferred event raised by the L1MantleToken contract.
type L1MantleTokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1MantleToken *L1MantleTokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*L1MantleTokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1MantleToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &L1MantleTokenOwnershipTransferredIterator{contract: _L1MantleToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1MantleToken *L1MantleTokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *L1MantleTokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L1MantleToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1MantleTokenOwnershipTransferred)
				if err := _L1MantleToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L1MantleToken *L1MantleTokenFilterer) ParseOwnershipTransferred(log types.Log) (*L1MantleTokenOwnershipTransferred, error) {
	event := new(L1MantleTokenOwnershipTransferred)
	if err := _L1MantleToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L1MantleTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the L1MantleToken contract.
type L1MantleTokenTransferIterator struct {
	Event *L1MantleTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L1MantleTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L1MantleTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L1MantleTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L1MantleTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L1MantleTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L1MantleTokenTransfer represents a Transfer event raised by the L1MantleToken contract.
type L1MantleTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_L1MantleToken *L1MantleTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*L1MantleTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _L1MantleToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &L1MantleTokenTransferIterator{contract: _L1MantleToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_L1MantleToken *L1MantleTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *L1MantleTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _L1MantleToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L1MantleTokenTransfer)
				if err := _L1MantleToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_L1MantleToken *L1MantleTokenFilterer) ParseTransfer(log types.Log) (*L1MantleTokenTransfer, error) {
	event := new(L1MantleTokenTransfer)
	if err := _L1MantleToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
